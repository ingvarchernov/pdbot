import random
from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dbmodel import SessionLocal, Groups, Countclick, Users
from sqlalchemy import func, and_

TOKEN: Final = '6132429387:AAHnTi3dTVSMRIEINhJhPncKs1EELTBBK1Y'
BOT_USERNAME: Final = '@Rada_Chortiv_bot'


# commands

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞—Ö–µ—Ä —Ç–∏ —Å—é–¥–∏ –∑–∞–π—à–æ–≤? –¢–∏ —Ö—Ç–æ —Ç–∞–∫–∏–π?")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–©–æ, –∑–∞–Ω–∞–¥-—Ç–æ —Ç—É–ø–∏–π, –¥–∞?")


async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø —â–µ –¥—É–º–∞—é, —â–æ —Å—é–¥–∏ –¥–æ–¥–∞—Ç–∏. –ù–µ —ó–±–∏ –≥–æ–ª–æ–≤—É!")


async def create_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    group = update.message.chat.id

    session = SessionLocal()

    existing_user = [session.query(Users).filter_by(userid=user_id, usernames=username, firstname=first_name).first()]

    existing_group = [session.query(Groups).filter(Groups.groupid == group).first()]

    existing_znach = [record.user_ids for record in session.query(Countclick).all()]

    # —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É–ø—É, —è–∫—â–æ –≥—Ä—É–ø–∏ –≤ –ë–î —â–µ –Ω–µ–º–∞—î
    for groups in existing_group:
        if not groups:
            new_group = Groups(groupid=group)
            session.add(new_group)
            session.commit()
            print(f'User ({username}) was added to group ({group})')

    # —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î —â–µ –Ω–µ–º–∞—î
    for user in existing_user:
        if not user and not user_id in existing_znach:  # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ
            new_user = Users(userid=user_id, usernames=username, firstname=first_name, group_id=group)
            session.add(new_user)
            session.commit()
            print(f'User ({username}) with id ({user_id}) successfully added in {group}.')
            await update.message.reply_text(f'–¢–µ–±–µ, –ø—ñ–¥–æ—Ä–∞, —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ Ô∏è‚Äçüåà')
        elif user and not user_id in existing_znach:
            await update.message.reply_text(f'–î–∞—É–Ω—ñ—Ç–æ—Å, —Ç–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ü—ñ—Å—è - –≤—ñ–¥—î–±–∏—Å—è!üò§{group}')
            print(f'User another try to register')
        elif user_id in existing_znach:
            await update.message.reply_text(f'–î–µ—Å—å —è —Ç–µ–±–µ, –ø—ñ–¥–æ—Ä–∞, –≤–∂–µ –±–∞—á–∏–≤ üåà {group}. –ó–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ—Å—å —â–µ —Ä–∞–∑')
            new_user = Users(userid=user_id, usernames=username, firstname=first_name, group_id=group)
            session.add(new_user)
            session.commit()
            print(f'User ({username}) with id ({user_id}) successfully added in {group}.')
            print(f'We`ve got user, but in another group')


async def pdr_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()

    user_count = session.query(func.count(Users.userid)).scalar()

    if user_count > 0:
        group_id = update.message.chat.id

        print(f'Group ID: {group_id}')

        # –Ø–∫—â–æ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        random_user = session.query(Users).filter(Users.group_id == group_id).order_by(func.random()).first()

        print(f'Random User ID: {random_user.userid}')

        # –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –≤–∏–±—Ä–∞–Ω–∏–º id –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ Countclick
        existing_countclick_user = session.query(Countclick).filter(
            and_(Countclick.user_ids == random_user.userid, Countclick.group_id == group_id)
        ).first()

        if existing_countclick_user:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î, –æ–Ω–æ–≤—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è amountclick
            existing_countclick_user.amountclick += 1
            session.commit()

            print(
                f'Existing User: {existing_countclick_user.user_ids}, Amountclick: {existing_countclick_user.amountclick}')
            if random_user.usernames is not None:
                await update.message.reply_text(f'üíñ–°—å–æ–≥–æ–¥–Ω—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—ñ–¥–æ—Ä–∞ –æ—Ç—Ä–∏–º—É—î @{random_user.usernames}. '
                                            f'\nüôà–Ü –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î {existing_countclick_user.amountclick} üè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåà')
            else:
                await update.message.reply_text(f'üíñ–°—å–æ–≥–æ–¥–Ω—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—ñ–¥–æ—Ä–∞ –æ—Ç—Ä–∏–º—É—î {random_user.firstname}. '
                                                f'\nüôà–Ü –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î {existing_countclick_user.amountclick} üè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåà')
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î, –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –≤ —Ç–∞–±–ª–∏—Ü—é Countclick
            countclick_data = Countclick(user_ids=random_user.userid, username=random_user.usernames,
                                         first_name=random_user.firstname, group_id=group_id, amountclick=1)
            session.add(countclick_data)
            session.commit()

            print(f'New User: {countclick_data.user_ids}, Amountclick: {countclick_data.amountclick}')

            if random_user.usernames is not None:
                await update.message.reply_text(f'üíñ–°—å–æ–≥–æ–¥–Ω—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—ñ–¥–æ—Ä–∞ –æ—Ç—Ä–∏–º—É—î @{random_user.usernames}. '
                                                f'\nüôà–Ü –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î {existing_countclick_user.amountclick} üè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåà')
            else:
                await update.message.reply_text(f'üíñ–°—å–æ–≥–æ–¥–Ω—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—ñ–¥–æ—Ä–∞ –æ—Ç—Ä–∏–º—É—î {random_user.firstname}. '
                                                f'\nüôà–Ü –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î {existing_countclick_user.amountclick} üè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äçüåà')
    else:
        await update.message.reply_text('–£ —Ç–∞–±–ª–∏—Ü—ñ Users –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.')


async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()

    chat_id = update.message.chat.id
    all_users = session.query(Countclick).filter(Countclick.group_id == chat_id).all()

    session.close()
    user_list = "\n".join(
        [f"\nüóø –¢–≤–æ—î –ø–∏–∑–¥–æ—Ü—Ç–≤–æ –∑–≤—É—á–∏—Ç—å —è–∫ {user.first_name} üòà\n"
         f"ü•∏–Ü –º–∞—î—à —Ç–∏ —Ç–∞–∫—É –∫-—Ç—å —á–ª–µ–Ω—ñ–≤ –≤ —Ä–æ—Ç—ñ: {user.amountclick} üçÜ" for user in all_users])

    await update.message.reply_text(f'üî•–ù–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—á—î–π –Ω–µ–≤–º–∏—Ä—É—â–∏—Ö: üî• \n{user_list}')


# Responses

def handle_response(text: str) -> str:
    processed: str = text.lower()

    if '–∫—É' in processed:
        return '–ü–∞—à–æ–ª –Ω–∞—Ö—É–π!'
    if '–ø–æ–º–æ—â' in processed:
        return '–¢—É–ø–æ–π. –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ help, –æ–≤–æ—á–∏–Ω–∞???'
    return '–Ø —Ç–≤–∞—è –Ω—î –ø–∞–Ω—ñ–º–∞—Ç—å)'


# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞–¥—Å–∏–ª–∞—î–º–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏.
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type  # –æ—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞–µ–Ω–Ω—è —Ç–∏–ø—É —á–∞—Ç—É, –¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–æ—Ç
    text = update.message.text
    grouptype = update.message.chat.id
    sender = update.message.from_user.first_name

    print(f'User ({sender}) in {message_type} with id ({grouptype}): {text}')

    if message_type == "supergroup" or message_type == "group":
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            response: str = handle_response(new_text)
        else:
            return
    else:
        response: str = handle_response(text)
    await update.message.reply_text(response)

    print('Bot: ', response)


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')


if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()

    # Commands
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))
    app.add_handler(CommandHandler('create', create_user_command))
    app.add_handler(CommandHandler('show', list_users_command))
    app.add_handler(CommandHandler('pidoras', pdr_command))

    # Message
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Errors
    app.add_error_handler(error)

    # Polls the bot
    print('Polling...')
    app.run_polling(poll_interval=1)
